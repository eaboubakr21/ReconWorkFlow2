name: SpectroCloud Monitor

permissions:
  contents: write
  id-token: write

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest

    env:
      ORG: "spectrocloud"
      HTTPX_PORTS: "80,443"

    outputs:
      new_subdomains_found: ${{ steps.compare.outputs.found }}
      new_subdomains_count: ${{ steps.compare.outputs.NEW_COUNT }}
      new_file_path: ${{ steps.compare.outputs.NEW_FILE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install required Go tools and pip httpx
        run: |
          export PATH=$PATH:$HOME/go/bin
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/chaos-client/cmd/chaos@latest
          go install -v github.com/tomnomnom/anew@latest
          go install -v github.com/tomnomnom/assetfinder@latest
          pip3 install 'httpx[cli]' || true

      - name: Install findomain (binary)
        run: |
          curl -L -o findomain.zip "https://github.com/findomain/findomain/releases/latest/download/findomain-linux-i386.zip"
          unzip -o findomain.zip
          chmod +x findomain
          sudo mv findomain /usr/local/bin/findomain || sudo mv findomain /usr/bin/findomain
          rm -f findomain.zip

      - name: Install httpx (ProjectDiscovery linux_amd64)
        run: |
          echo "[*] Downloading latest httpx release..."
          URL=$(curl -s https://api.github.com/repos/projectdiscovery/httpx/releases/latest | grep "browser_download_url.*linux_amd64.zip" | cut -d '"' -f 4)
          wget -q "$URL" -O httpx_latest.zip
          unzip -o httpx_latest.zip
          chmod +x httpx
          sudo mv httpx /usr/local/bin/httpx-pd
          rm -f httpx_latest.zip LICENSE.md README.md 2>/dev/null || true
          echo "[+] httpx-pd ready"

      - name: Export API Keys to environment
        run: |
          echo "GITHUB_TOKEN=${{ secrets.SUBFINDER_GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "BEVIGIL_API_KEY=${{ secrets.BEVIGIL_API_KEY }}" >> $GITHUB_ENV
          echo "FOFA_API_KEY=${{ secrets.FOFA_API_KEY }}" >> $GITHUB_ENV
          echo "INTELX_API_KEY=${{ secrets.INTELX_API_KEY }}" >> $GITHUB_ENV
          echo "SECURITYTRAILS_API_KEY=${{ secrets.SECURITYTRAILS_API_KEY }}" >> $GITHUB_ENV
          echo "SHODAN_API_KEY=${{ secrets.SHODAN_API_KEY }}" >> $GITHUB_ENV
          echo "VIRUSTOTAL_API_KEY=${{ secrets.VIRUSTOTAL_API_KEY }}" >> $GITHUB_ENV
          echo "ZOOMEYE_API_KEY=${{ secrets.ZOOMEYE_API_KEY }}" >> $GITHUB_ENV
          echo "PDCP_API_KEY=${{ secrets.PDCP_API_KEY }}" >> $GITHUB_ENV

      - name: Write subfinder provider config
        run: |
          mkdir -p ~/.config/subfinder
          cat <<EOF > ~/.config/subfinder/provider-config.yaml
bevigil:
  - $BEVIGIL_API_KEY
bufferover: []
builtwith: []
c99: []
censys: []
certspotter: []
chaos:
  - $PDCP_API_KEY
chinaz: []
digitalyama: []
dnsdb: []
dnsdumpster: []
dnsrepo: []
facebook: []
fofa:
  - $FOFA_API_KEY
fullhunt: []
github: []
hunter: []
intelx:
  - $INTELX_API_KEY
leakix: []
netlas: []
pugrecon: []
quake: []
redhuntlabs: []
robtex: []
rsecloud: []
securitytrails:
  - $SECURITYTRAILS_API_KEY
shodan:
  - $SHODAN_API_KEY
threatbook: []
virustotal:
  - $VIRUSTOTAL_API_KEY
whoisxmlapi: []
zoomeyeapi:
  - $ZOOMEYE_API_KEY
EOF
      - name: Prepare wildcard list
        run: |
          echo "spectrocloud.com" > wildcards.txt
          echo "kairos.io" >> wildcards.txt
          cat wildcards.txt

      - name: Run subdomain enumeration pipeline
        id: enum
        run: |
          set -eux
          ORG="spectrocloud"
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          CUR_DIR="data/current/${ORG}"
          mkdir -p "$CUR_DIR"

          subfinder -silent -all -recursive -t 200 -dL wildcards.txt -o "$CUR_DIR/subfinder.txt" || true
          findomain -quiet -f wildcards.txt -oL "$CUR_DIR/findomain.txt" || true
          cat wildcards.txt | xargs -n1 -I {} bash -c "assetfinder --subs-only {} >> $CUR_DIR/assetfinder.txt || true"

          if [ -n "$PDCP_API_KEY" ]; then
            chaos -dL wildcards.txt -silent -o "$CUR_DIR/chaos.txt" || true
          fi

          if [ ! -d "SubEnum" ]; then
            git clone https://github.com/bing0o/SubEnum.git
            cd SubEnum && chmod +x setup.sh && ./setup.sh && cd ..
          fi
          ./SubEnum/subenum.sh -l wildcards.txt -u wayback,crt,abuseipdb,Amass -o "$CUR_DIR/subenum.txt" || true

          cat "$CUR_DIR"/*.txt 2>/dev/null | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr '[:upper:]' '[:lower:]' | sort -u > "$CUR_DIR/candidates.txt"
          echo "CANDIDATES=$CUR_DIR/candidates.txt" >> $GITHUB_OUTPUT

      - name: Probe live subdomains and de-duplicate
        id: probe
        run: |
          set -eux
          ORG="spectrocloud"
          CUR="data/current/${ORG}/candidates.txt"
          LIVE="data/current/${ORG}/live.txt"
          touch $LIVE

          if [ -s "$CUR" ]; then
            cat "$CUR" | sed '/^\s*$/d' | httpx-pd -ports $HTTPX_PORTS -threads 200 -silent -follow-redirects | cut -d ':' -f 1 | sort -u > "$LIVE"
          fi

          echo "LIVE=$LIVE" >> $GITHUB_OUTPUT

      - name: Compare with previous results
        id: compare
        run: |
          set -eux
          ORG="spectrocloud"
          PREV="data/previous/${ORG}.txt"
          CUR="data/current/${ORG}/live.txt"
          NEW_FILE="data/new/${ORG}-${GITHUB_RUN_ID}.txt"

          mkdir -p data/previous data/new

          if [ ! -f "$PREV" ]; then touch "$PREV"; fi

          comm -13 <(sort "$PREV") <(sort "$CUR") > "$NEW_FILE"
          NEW_COUNT=$(wc -l < "$NEW_FILE" || echo 0)

          echo "NEW_FILE=$NEW_FILE" >> $GITHUB_OUTPUT
          echo "NEW_COUNT=$NEW_COUNT" >> $GITHUB_OUTPUT
          echo "found=$([ "$NEW_COUNT" -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Update previous results
        run: |
          cp "data/current/${ORG}/live.txt" "data/previous/${ORG}.txt"

      - name: Discord Notify - New Subdomains
        if: ${{ steps.compare.outputs.NEW_COUNT > 0 }}
        run: |
          NEW_FILE="${{ steps.compare.outputs.NEW_FILE }}"
          COUNT=${{ steps.compare.outputs.NEW_COUNT }}
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK_SPECTROCLOUD }}"
          ITEMS=$(head -n 15 "$NEW_FILE" | sed -z 's/\n/\\n/g' | sed 's/"/\\"/g')
          EMBED=$(jq -n --arg title "üåê ${COUNT} New Live Subdomains Found" \
            --arg desc "Detected on SpectroCloud / Kairos domains" \
            --arg items "$ITEMS" \
            '{
              "embeds":[{"title":$title,"description":$desc,"color":5814783,
              "fields":[{"name":"New (First 15)","value":"```'$items'```"}],
              "footer":{"text":"Automated via GitHub Actions"}}]}')
          curl -s -H "Content-Type: application/json" -X POST -d "$EMBED" "$WEBHOOK"

  nuclei:
    needs: monitor
    runs-on: ubuntu-latest
    if: needs.monitor.outputs.new_subdomains_found == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Install Nuclei
        run: go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest

      - name: Run Nuclei on new subdomains
        run: |
          NEW_FILE="${{ needs.monitor.outputs.new_file_path }}"
          mkdir -p scans
          nuclei -t ~/nuclei-templates/http -l "$NEW_FILE" -es info -mhe 5 -stats \
            -H "X-Forwarded-For: 127.0.0.1" \
            -H "X-Forwarded-Host: 127.0.0.1" \
            -H "X-Forwarded: 127.0.0.1" \
            -H "Forwarded-For: 127.0.0.1" \
            -o "scans/nuclei-${{ github.run_id }}.txt" || true

      - name: Discord Notify - Nuclei Results
        run: |
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK_SPECTROCLOUD }}"
          REPORT=$(tail -n 15 scans/nuclei-${{ github.run_id }}.txt | sed -z 's/\n/\\n/g')
          EMBED=$(jq -n --arg title "üö® Nuclei Scan Results ‚Äî SpectroCloud" \
            --arg desc "Top 15 findings on new subdomains" \
            --arg report "$REPORT" \
            '{
              "embeds":[{"title":$title,"description":$desc,"color":16723712,
              "fields":[{"name":"Findings (Last 15)","value":"```'$report'```"}],
              "footer":{"text":"Automated via GitHub Actions"}}]}')
          curl -s -H "Content-Type: application/json" -X POST -d "$EMBED" "$WEBHOOK"
